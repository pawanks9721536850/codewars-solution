Q1:Invert values
Given a set of numbers, return the additive inverse of each. Each positive becomes negatives, and the negatives become positives.

[1, 2, 3, 4, 5] --> [-1, -2, -3, -4, -5]
[1, -2, 3, -4, 5] --> [-1, 2, -3, 4, -5]
[] --> []

solution:

public class Kata {
  public static int[] invert(int[] array) {

    for ( int i = 0 ; i < array.length ; i++ )
      {
      array[i] = array[i]*(-1) ;
}
    return array ;
  }
}



Q2:Square(n) Sum
   Complete the square sum function so that it squares each number passed into it and then sums the results together.

   For example, for [1, 2, 2] it should return 9 because

solution:

   public class Kata
    {
     public static int squareSum(int[] n)
     {
      //Your Code
          int ans = 0 ;
       for ( int i = 0 ; i < n.length ; i++ )
         {
         ans += n[i]*n[i];
       }
       return ans ;
     }
    }



Q3: Count of positives / sum of negatives

Given an array of integers.

Return an array, where the first element is the count of positives numbers and the second element is sum of negative numbers. 0 is neither positive nor negative.

If the input is an empty array or is null, return an empty array.

Example
For input [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, -11, -12, -13, -14, -15], you should return [10, -65].


Solution:

   public class Kata
   {
       public static int[] countPositivesSumNegatives(int[] input)
       {
           int ansArr[]  ;

           //ansArr.clear() ;

           if ( input == null  || input.length == 0)
             {
             ansArr = new int[0];
             return ansArr ;
           }

           ansArr = new int [2];
           int pos = 0 ;
           int neg = 0 ;

           for ( int i = 0 ; i < input.length ; i++ )
             {
                if ( input[i] < 0 ) neg += input[i];
                else if ( input[i] > 0 ) pos++ ;

           }



         ansArr[0] = pos ;
         ansArr[1] = neg ;

         return ansArr ;
       }
   }



Q4:  Sum of positive
     You get an array of numbers, return the sum of all of the positives ones.

     Example [1,-4,7,12] => 1 + 7 + 12 = 20

     Note: if there is nothing to sum, the sum is default to 0.


    public class Positive{

      public static int sum(int[] arr){

        int ans = 0 ;
        for ( int i = 0 ; i < arr.length ; i++ )
          {
            if ( arr[i] >   0 ) ans += arr[i] ;
        }
        return ans ;
      }

    }



Q5:Convert number to reversed array of digits
   Convert number to reversed array of digits
   Given a random non-negative number, you have to return the digits of this number within an array in reverse order.

   Example(Input => Output):
   35231 => [1,3,2,5,3]
   0 => [0]

   public class Kata {
     public static int[] digitize(long n) {
       // Code here



       String number =  Long.toString(n);
       int length = number.length() ;
       //System.out.println(number);
       int ansArr[] = new int[length] ;
       for ( int i = length-1 ; i >= 0 ; i-- )
         {
           ansArr[length - i -1 ] = Character.getNumericValue(number.charAt(i));
       }
       return ansArr ;
     }
   }


Q6:Calculate average
Write a function which calculates the average of the numbers in a given list.

Note: Empty arrays should return 0.

public class Kata{
  public static double find_average(int[] array){
       double ans = 0 ;
       double count = 0 ;
    for ( int i = 0 ; i < array.length ;i++ )
      {
         ans += array[i];
         count++ ;
    }
    ans = ans/ count ;
    return ans ;
  }
}


Q7:Get the mean of an array

It's the academic year's end, fateful moment of your school report. The averages must be calculated. All the students come to you and entreat you to calculate their average for them. Easy ! You just need to write a script.

Return the average of the given array rounded down to its nearest integer.

The array will never be empty.


public class School{

 	public static int getAverage(int[] marks){

    int sum = 0 ;
    int count = 0 ;
    for ( int i = 0 ; i < marks.length ; i++ )
      {
      sum += marks[i];
      count++ ;
    }
    return sum/count ;
	}

}



Q8: Count the Monkeys!
You take your son to the forest to see the monkeys. You know that there are a certain number there (n), but your son is too young to just appreciate the full number, he has to start counting them from 1.

As a good parent, you will sit and count with him. Given the number (n), populate an array with all numbers up to and including that number, but excluding zero.

For example(Input --> Output):

10 --> [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
 1 --> [1]


    public class MonkeyCounter
    {
      public static int[] monkeyCount(final int n){

         int arr[] = new int[n];
         for ( int i = 1 ; i <= n ; i++ )
           {
             arr[i-1] = i;
         }
        return arr ;
      }
    }


