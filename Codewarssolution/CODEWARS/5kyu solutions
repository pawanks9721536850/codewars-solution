Q1: Maximum Contiguous Sum
    Given an unsorted array of integer values, find the maximum positive sum of any contiguous range within the array.

    An array containing only negative values can return 0. Your solution should be efficient enough to not throw a timeout exception.

    Example:
    maxContiguousSum([3, -4, 8, 7, -10, 19, -3]); // returns 24
    maxContiguousSum([-8, -10, -12, -2, -3, 5]); // returns 5


    public class Kata{
        public static int maxContiguousSum(final int[] arr) {
            // your code here
           if (arr.length == 0)
            {
             return 0 ;
             }

            int s = arr[0];
            int presentsum = arr[0];

                for (int i = 1 ; i <arr.length ; i++)
                {
                  presentsum = Math.max (arr[i] , presentsum+arr[i]);
                  s = Math.max(s , presentsum );

                 }

          return Math.max(s ,0) ;
        }
    }


Q2:    Perimeter of squares in a rectangle
The drawing shows 6 squares the sides of which have a length of 1, 1, 2, 3, 5, 8. It's easy to see that the sum of the perimeters of these squares is : 4 * (1 + 1 + 2 + 3 + 5 + 8) = 4 * 20 = 80

Could you give the sum of the perimeters of all the squares in a rectangle when there are n + 1 squares disposed in the same manner as in the drawing:


    import java.math.BigInteger;
    public class SumFct {

      public static BigInteger fibo ( BigInteger n )
        {
        if (n.equals(BigInteger.ZERO)) {
                return BigInteger.ZERO;
            } else if (n.equals(BigInteger.ONE)) {
                return BigInteger.ONE;
            }


            BigInteger a = BigInteger.ZERO;
            BigInteger b = BigInteger.ONE;
            BigInteger sum = BigInteger.ONE;
            n = n.add(b) ;

            for (BigInteger i = BigInteger.valueOf(2); i.compareTo(n) <= 0; i = i.add(BigInteger.ONE)) {
                BigInteger c = a.add(b);
                sum = sum.add(c);
                a = b;
                b = c;
            }

            return sum;
      }
    	public static BigInteger perimeter(BigInteger n) {

           System.out.println( fibo(n) ) ;
            return BigInteger.valueOf(4).multiply( fibo(n)) ;
    	}
    }




