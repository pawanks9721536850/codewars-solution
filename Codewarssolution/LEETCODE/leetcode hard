Q1: TRAPPING RAIN WATER
    Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining.



    Example 1:


    Input: height = [0,1,0,2,1,0,1,3,2,1,2,1]
    Output: 6
    Explanation: The above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped.
    Example 2:

    Input: height = [4,2,0,3,2,5]
    Output: 9


    class Solution {
        ArrayList<Integer> findLeftMax ( int [] height)
        {
            int n = height.length ;
            ArrayList<Integer> leftmax = new ArrayList<>();
            leftmax.add(height[0]);
            for ( int i = 1 ; i < n ; i++ )
            {
                leftmax.add(  Math.max( leftmax.get(i-1) , height[i] ));
            }
            //System.out.println(leftmax);
            return leftmax ;
        }
        ArrayList<Integer> findRightMax ( int [] height )
        {
            int n = height.length ;
            ArrayList<Integer> rightmax = new ArrayList<>() ;
            rightmax.addFirst(height[n-1]);

            for ( int i = n-2 ; i >= 0 ; i-- )
            {
                rightmax.addFirst( Math.max (rightmax.get(0) , height[i] ));
            }
            //System.out.println(rightmax);
            return rightmax ;
        }

        public int trap(int[] height) {
            ArrayList<Integer> leftmax = findLeftMax( height );
            ArrayList<Integer> rightmax = findRightMax( height );

            int trappedWater = 0 ;

            for ( int i = 1 ; i < height.length -1 ; i++ )
            {
                int w = Math.min( leftmax.get(i) , rightmax.get(i) ) - height[i] ;
                //System.out.print(w+" ");
                trappedWater += w;
            }

            return trappedWater  ;

        }
    }


Q2:     Reverse Nodes in k-Group
        Given the head of a linked list, reverse the nodes of the list k at a time, and return the modified list.

        k is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of k then left-out nodes, in the end, should remain as it is.

        You may not alter the values in the list's nodes, only nodes themselves may be changed.



        Example 1:


        Input: head = [1,2,3,4,5], k = 2
        Output: [2,1,4,3,5]
        Example 2:


        Input: head = [1,2,3,4,5], k = 3
        Output: [3,2,1,4,5]


        Constraints:

        The number of nodes in the list is n.
        1 <= k <= n <= 5000
        0 <= Node.val <= 1000


        class Solution {
            public int lengthOfList ( ListNode head )
            {
                int count = 0 ;
                while ( head != null )
                {
                    count ++ ;
                    head = head.next ;
                }
                return count ;
            }
            public ListNode reverseKGroup(ListNode head, int k) {
                int n = lengthOfList ( head );
                int totalGroups = n /k ;
                ListNode previousHead = null , currentHead = head , ansNode = null;

                for ( int i = 0 ; i < totalGroups ; i++ )
                {
                    ListNode previousNode = null , currentNode = currentHead , nextNode = null;
                    for ( int j = 0 ; j < k ; j++ )
                    {
                        nextNode = currentNode.next ;
                        currentNode.next = previousNode ;
                        previousNode = currentNode ;
                        currentNode = nextNode ;
                    }

                    if ( previousHead == null ) ansNode = previousNode ;
                    else previousHead.next = previousNode  ;

                    previousHead = currentHead ;
                    currentHead = currentNode ;
                }
                previousHead.next = currentHead ;

                return ansNode ;

            }
        }


Q3:Sliding Window Maximum
You are given an array of integers nums, there is a sliding window of size k which is moving from the very left of the array to the very right. You can only see the k numbers in the window. Each time the sliding window moves right by one position.

Return the max sliding window.



Example 1:

Input: nums = [1,3,-1,-3,5,3,6,7], k = 3
Output: [3,3,5,5,6,7]

import java.util.*;
class Solution {
    public int[] maxSlidingWindow(int[] nums, int k) {
    Deque<Integer> indexDq = new ArrayDeque<> () ;
    ArrayList<Integer> arr = new ArrayList<>() ;
    int n = nums.length ;
    for ( int i = 0 ; i < n ; i++ )
    {
        while( indexDq.size() != 0 && indexDq.getFirst() <= (i-k) )
        { indexDq.removeFirst(); }
        while ( indexDq.size() != 0 && nums[indexDq.getLast()] <= nums[i] )
        { indexDq.removeLast(); }

        indexDq.add(i);
        if ( i >= k-1 )
        {arr.add(indexDq.getFirst() );}

    }

    int [] ans = new int [arr.size()] ;
    for ( int i = 0 ; i < ans.length ; i++ )ans[i] = nums[arr.get(i)];
    return ans ;

    }
}

Q4: